#!/usr/bin/env python

import sys

from repo_tool import git_utils
from repo_tool import rept_utils

from repo_tool import check_deps_cmd
from repo_tool import feature_cmd
from repo_tool import fetch_cmd
from repo_tool import prune_cmd
from repo_tool import switch_cmd
from repo_tool import sync_cmd

################################################################################
# main funcs
################################################################################

def exec_cmd(argv, dependencies, local_config):
    args = argv[1:]

    if argv[0] == 'sync':
        sync_cmd.cmd_sync(dependencies, args)
    elif argv[0] == 'fetch':
        fetch_cmd.cmd_fetch(dependencies, local_config, args)
    elif argv[0] == 'prune':
        prune_cmd.cmd_prune(dependencies, local_config, args)
    elif (argv[0] == 'check-deps' or
          argv[0] == 'cd'):
        check_deps_cmd.cmd_check_deps(dependencies, args)
    elif (argv[0] == 'feature' or
          argv[0] == 'feat'):
        feature_cmd.cmd_feature(dependencies, local_config, args)
    elif (argv[0] == 'switch' or
          argv[0] == 'sw'):
        switch_cmd.cmd_switch(dependencies, local_config, args)
    else:
        sys.exit('rept: unknown command: {0}'.format(argv[0]))

def main(argv):
    if len(argv) == 0:
        return

    rept_utils.move_to_repo_dir_or_die()

    # Get the dependency file. If we're able to open it, keep it open to lock
    # both it and the directory in which it resides for the duration of
    # execution.
    rept_deps_file = rept_utils.open_rept_dep_file()
    if not rept_deps_file:
        sys.exit('rept: could not find .rept_deps file')
        return

    dependencies = rept_utils.get_dependency_data_or_die(rept_deps_file)

    rept_local_file = rept_utils.open_rept_local_file()
    local_config = rept_utils.get_local_config_or_die(
        rept_local_file, git_utils.get_remotes())

    try:
        exec_cmd(argv, dependencies, local_config)
    finally:
        rept_deps_file.close()
        if rept_local_file: rept_local_file.close()

if __name__ == "__main__":
    main(sys.argv[1:])
